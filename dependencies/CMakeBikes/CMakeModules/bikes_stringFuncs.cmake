# bikes_stringFuncs.cmake
#===============================================================================
function(parse_string  in_str  in_separateStrList  out_strList)	
	set(slist ${${out_strList}})
	string(LENGTH "${in_str}" str_l)
	#string(LENGTH ${in_separateStr} sl)
	set(i ${str_l})
	set(spr_l 1)
	foreach(spr ${${in_separateStrList}})
		string(FIND "${in_str}" ${spr} j)
		if(${j} EQUAL -1)
		elseif(${j} LESS ${i})
			set(i ${j})
			string(LENGTH ${spr} spr_l)
		endif()
	endforeach()
	
	string(FIND "${in_str}" \" ql)
	if((NOT (${ql} EQUAL -1)) AND (${ql} LESS ${i}))
		
		math(EXPR ql_ ${ql}+1)
		string(SUBSTRING "${in_str}" ${ql_} -1 qstr)
		string(FIND ${qstr} \" qr)
		if(${qr} EQUAL -1)
			set(slist ${slist} "${in_str}")
		else()
			math(EXPR ql ${ql}+${qr}+2)
			string(SUBSTRING "${in_str}" 0 ${ql} sl)
			string(SUBSTRING "${in_str}" ${ql} -1 sr)
			set(sr_list)
			if(sr)
				parse_string(${sr} ${in_separateStrList} sr_list)
				set(slist ${slist} ${sl} ${sr_list})
			else()
				set(slist ${slist} ${sl})
			endif()				
		endif()
	else()
		if(NOT (${i} EQUAL ${str_l}))
			string(SUBSTRING "${in_str}" 0 ${i} ss)
			set(slist ${slist} ${ss})
			math(EXPR ii ${spr_l}+${i})
			string(SUBSTRING "${in_str}" ${ii} -1 ss)
			if(ss)
				parse_string(${ss} ${in_separateStrList} slist)
			endif()
		else()
			set(slist ${slist} "${in_str}")
		endif()
	endif()
	set(${out_strList} ${slist} PARENT_SCOPE)
endfunction()
#===============================================================================
function(simple_parse_string in_str in_separateStrList out_strList)
	set(slist)
	string(LENGTH "${in_str}" str_l)		
	
	while(NOT (${str_l} EQUAL 0))
		set(spr_l 1)
		set(i ${str_l})
		foreach(spr ${${in_separateStrList}})
			string(FIND "${in_str}" "${spr}" j)
			if(${j} EQUAL -1)
			elseif(${j} LESS ${i})
				set(i ${j})
				string(LENGTH "${spr}" spr_l)
			endif()
		endforeach()
		string(SUBSTRING "${in_str}" 0 ${i} ss)
		list(APPEND slist "${ss}")
		
		if(${i} LESS ${str_l})
			math(EXPR ii "${spr_l}+${i}")
			string(SUBSTRING "${in_str}" ${ii} -1 ss)
			set(in_str ${ss})
		else()
			set(in_str)
		endif()
		
		if(DEFINED in_str)
			string(LENGTH "${in_str}" str_l)
		else()
			set(str_l 0)
		endif()
	endwhile()
	set(${out_strList} "${slist}" PARENT_SCOPE)
endfunction()
#===============================================================================
function(stringlist_to_string in_strList in_separateStr out_str)
	set(str)
	if(NOT in_separateStr)
		set(in_separateStr)
	endif()	
	foreach(s ${${in_strList}})
		set(str "${str}${in_separateStr}${s}")
	endforeach()
	if(in_separateStr)
		string(LENGTH ${in_separateStr} sl)
		string(SUBSTRING ${str} sl -1 str)
	endif()
	set(${out_str} ${str} PARENT_SCOPE)
endfunction()
#===============================================================================
function(escape_str inout_str)
if(${inout_str})
	string(REPLACE ";" " " str ${${inout_str}})
	set(${inout_str} ${str} PARENT_SCOPE)
endif()
endfunction()
#===============================================================================
function(string_without_comments in_str out_str)
	string(FIND ${in_str} "#" c)
	if(${c} EQUAL -1)
		set(${out_str} ${in_str} PARENT_SCOPE)
	else()
		string(SUBSTRING ${in_str} 0 ${c} s)
		set(${out_str} ${s} PARENT_SCOPE)
	endif()
endfunction()
#===============================================================================
function(get_func_string in_strList in_startIndex in_funcName out_funcStr out_endIndex)
	list(GET ${in_strList} ${in_startIndex} s)
	set(s ${s})
	set(funcStr)
	set(endIndex ${in_startIndex})	
	if(s)
		string_without_comments(${s} s)		
		if(s)
			string(TOLOWER ${s} lows)		
			string(TOLOWER ${in_funcName} in_funcName)		
			string(FIND ${lows} "${in_funcName}" fi)			
			if(NOT (${fi} EQUAL -1))
				string(FIND ${s} "(" bracket_l)
				if( ${bracket_l} GREATER ${fi})										
					string(FIND ${s} ")" bracket_r REVERSE)
					if(NOT (${bracket_r} EQUAL -1))						
						if(${bracket_r} GREATER ${bracket_l})
							set(funcStr ${s})
						endif()
					else()
						
						set(funcStr ${s})
						math(EXPR i0 ${in_startIndex}+1)
						list(LENGTH ${in_strList} in)						
						set(exists_bracket_r false)						
						foreach(i RANGE ${i0} ${in})
							list(GET ${in_strList} ${i} s)
							string_without_comments(${s} s)							
							if(s)
								set(funcStr "${funcStr}\n${s}")
								string(FIND ${s} ")" bracket_r REVERSE)
								if(NOT (${bracket_r} EQUAL -1))
									set(exists_bracket_r true)
									set(endIndex ${i})
									break()
								endif()
							endif()
						endforeach()
						if(NOT exists_bracket_r)
							set(funcStr)
						endif()
					endif()				
				endif()			
			endif()	
		endif()	
	endif()	
	
	set(${out_funcStr} ${funcStr} PARENT_SCOPE)		
	set(${out_endIndex} ${endIndex} PARENT_SCOPE)
endfunction()
#===============================================================================
function(parse_string_func_par in_str out_parList)	
	set(s ${in_str})
	string(FIND ${s} "#" c)
	if(NOT (${c} EQUAL -1))
		string(SUBSTRING ${s} 0 ${c} s)
	endif()	
		
	string(TOLOWER ${s} slow)
	string(FIND ${slow} "(" i1)
	if(${i1} EQUAL -1)
		set(par_list NO)
	else()		
		string(FIND ${slow} ")" i2 REVERSE)
		if(${i2} EQUAL -1)
			set(par_list NO)
		else()
			math(EXPR i ${i1}+1)			
			math(EXPR spar_l ${i2}-${i})
			string(SUBSTRING ${s} ${i} ${spar_l} spar)
			set(spr " " "\n" "\t")
			parse_string(${spar} spr par_list)
		endif()
	endif()
	set(${out_parList} ${par_list} PARENT_SCOPE)
endfunction()
#===============================================================================
function(add_line inout_str in_line)
set(${inout_str} "${${inout_str}}\n${in_line}" PARENT_SCOPE)
endfunction()
#===============================================================================
