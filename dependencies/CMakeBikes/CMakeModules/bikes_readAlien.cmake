set(ALIEN_ORIGIN_NAME		CMakeLists_origin.txt )
set(ALIEN_GENERATED_NAME	CMakeLists_generated.txt )
set(BIKES_MAIN_SIGNATURE	CMakeBikesLists )
set(BIKES_GNR_SIGNATURE		CMakeBikes_generatedCMakeLists )
set(PATH_STRING_SEPARATOR	| )
set(BIKES_GENCODE_BEGIN		"\n# CMakeBikes generated ->" )
set(BIKES_GENCODE_END		"# <- CMakeBikes generated\n" )
#===============================================================================
function(add_lines_for_project  in_funcStr out_genStrList)
	list(APPEND ${out_genStrList} "${in_funcStr}")
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
	list(APPEND ${out_genStrList} "set(CMAKEBIKES_TMP_SUBPROJECT_NAME \${PROJECT_NAME} PARENT_SCOPE)")
#	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_SUBPROJECTS_LIST")
#	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_LIB_LIST")
#	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST")
#	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_TARGET_LIST")
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})
	set(${out_genStrList} ${${out_genStrList}} PARENT_SCOPE)
endfunction()
#-------------------------------------------------------------------------------
function(add_lines_for_subdirectory in_funcStr out_genStrList)

	list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
	list(APPEND ${out_genStrList} "set(CMAKEBIKES_TMP_SUBPROJECT_NAME)")
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})

	list(APPEND ${out_genStrList} ${in_funcStr})	
		
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})		
	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_SUBPROJECTS_LIST \${CMAKEBIKES_\${PROJECT_NAME}_SUBPROJECTS_LIST} \${CMAKEBIKES_TMP_SUBPROJECT_NAME})")	
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})
	
	list(GET ${out_genStrList} 0 ps)	
	parse_string_func_par(${in_funcStr} parList)
	foreach(p ${parList})
		set(ps ${ps}${p}${PATH_STRING_SEPARATOR})
	endforeach()
	list(REMOVE_AT ${out_genStrList} 0)
	list(INSERT ${out_genStrList} 0 ${ps})
	set(${out_genStrList} ${${out_genStrList}} PARENT_SCOPE)	
endfunction()
#-------------------------------------------------------------------------------
function(add_lines_for_library  in_funcStr  out_genStrList)
	list(APPEND ${out_genStrList} ${in_funcStr})
	parse_string_func_par(${in_funcStr} parList)	
	if(parList)
		list(GET parList 0 trg)		
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
		#list(APPEND ${out_genStrList} "set(BIKES_SUBLIB_LIST \${BIKES_SUBLIB_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "set(BIKES_SUBLIB_LIST \${BIKES_SUBLIB_LIST} PARENT_SCOPE)")
		list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_LIB_LIST \${CMAKEBIKES_\${PROJECT_NAME}_LIB_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "push_up(CMAKEBIKES_\${PROJECT_NAME}_LIB_LIST)")
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})		
	endif()	
	set(${out_genStrList} ${${out_genStrList}} PARENT_SCOPE)
endfunction()
#-------------------------------------------------------------------------------
function(add_lines_for_executable  in_funcStr  out_genStrList)
	list(APPEND ${out_genStrList} ${in_funcStr})
	parse_string_func_par(${in_funcStr} parList)	
	if(parList)
		list(GET parList 0 trg)		
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
		#list(APPEND ${out_genStrList} "set(BIKES_SUBEXEC_LIST \${BIKES_SUBEXEC_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "set(BIKES_SUBEXEC_LIST \${BIKES_SUBEXEC_LIST} PARENT_SCOPE)")
		list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST \${CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "push_up(CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST)")
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})
	endif()	
	set(${out_genStrList} ${${out_genStrList}} PARENT_SCOPE)
endfunction()
#-------------------------------------------------------------------------------
function(add_lines_for_custom_target  in_funcStr  out_genStrList)
	list(APPEND ${out_genStrList} ${in_funcStr})
	parse_string_func_par(${in_funcStr} parList)	
	if(parList)
		list(GET parList 0 trg)		
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
		#list(APPEND ${out_genStrList} "set(BIKES_SUBEXEC_LIST \${BIKES_SUBEXEC_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "set(BIKES_SUBEXEC_LIST \${BIKES_SUBEXEC_LIST} PARENT_SCOPE)")
		list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_HLIB_LIST \${CMAKEBIKES_\${PROJECT_NAME}_HLIB_LIST} ${trg})")
		#list(APPEND ${out_genStrList} "push_up(CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST)")
		list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})
	endif()	
	set(${out_genStrList} ${${out_genStrList}} PARENT_SCOPE)
endfunction()
#-------------------------------------------------------------------------------
function(add_lines_for_end out_genStrList)
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_BEGIN})
	list(APPEND ${out_genStrList} "set(CMAKEBIKES_\${PROJECT_NAME}_TARGET_LIST \${CMAKEBIKES_\${PROJECT_NAME}_EXEC_LIST} \${CMAKEBIKES_\${PROJECT_NAME}_LIB_LIST} \${CMAKEBIKES_\${PROJECT_NAME}_HLIB_LIST})")
	list(APPEND ${out_genStrList} "push_up_project_variables(\${PROJECT_NAME})")
	list(APPEND ${out_genStrList} ${BIKES_GENCODE_END})
	push_up(${out_genStrList})
endfunction()
#===============================================================================
function(is_alien_dir in_dir out_isAlien)
	get_filename_component(in_dir ${in_dir} ABSOLUTE)
	if(EXISTS ${in_dir}/CMakeLists.txt)
		#file(STRINGS ${in_dir}/CMakeLists.txt str LIMIT_COUNT 1)
		file_strings(${in_dir}/CMakeLists.txt strl)
		list(GET strl 0 str)		
		string(FIND ${str} ${BIKES_MAIN_SIGNATURE} si)
		if(${si} EQUAL -1)
			set(${out_isAlien} YES PARENT_SCOPE)			
		else()
			set(${out_isAlien} NO PARENT_SCOPE)			
		endif()
	else()
		set(${out_isAlien} PARENT_SCOPE)
	endif()
endfunction()
#===============================================================================
function(alien_read_begin in_alienDirs)
	foreach(d ${${in_alienDirs}})	
		get_binary_path(${d} bd)
		file(RENAME "${d}/CMakeLists.txt" "${d}/${ALIEN_ORIGIN_NAME}")
		#file( ${d}/${ALIEN_GENERATED_NAME} ${d}/CMakeLists.txt)
		file_copy("${bd}/${ALIEN_GENERATED_NAME}" "${d}/CMakeLists.txt")
	endforeach()
endfunction()
#-------------------------------------------------------------------------------
function(alien_read_end in_alienDirs)
	foreach(d ${${in_alienDirs}})
		#file(RENAME ${d}/CMakeLists.txt ${d}/${ALIEN_GENERATED_NAME})		
		file(RENAME ${d}/${ALIEN_ORIGIN_NAME} ${d}/CMakeLists.txt)
	endforeach()
endfunction()
#===============================================================================
# CMakeBikesLists_generated
# HASH
# path1|path2|path3|...|pathN
function(check_alien_dir in_alienPath out_readyRead out_alienSubdirs)
	get_filename_component(in_alienPath ${in_alienPath} ABSOLUTE)	
	set(rr false)
	set(sd)
	set(alien true)
	get_binary_path(${in_alienPath} binPath)
	
	if(EXISTS ${in_alienPath}/CMakeLists.txt)
		is_alien_dir(${in_alienPath} alien)
		if(alien)
			if(EXISTS "${binPath}/${ALIEN_GENERATED_NAME}")
				set(rr true)
			# elseif(EXISTS ${in_alienPath}/${ALIEN_ORIGIN_NAME})
				# file(RENAME ${in_alienPath}/CMakeLists.txt ${in_alienPath}/${ALIEN_GENERATED_NAME})
				# file(RENAME ${in_alienPath}/${ALIEN_ORIGIN_NAME} ${in_alienPath}/CMakeLists.txt)
				# set(rr true)
			else()
				set(rr false)
			endif()
			if(EXISTS ${in_alienPath}/${ALIEN_ORIGIN_NAME})
				file(RENAME ${in_alienPath}/${ALIEN_ORIGIN_NAME} ${in_alienPath}/CMakeLists.txt)
			endif()
		else()
			set(rr true)
		endif()
	# elseif(EXISTS ${in_alienPath}/${ALIEN_ORIGIN_NAME})
		# file(RENAME ${in_alienPath}/${ALIEN_ORIGIN_NAME} ${in_alienPath}/CMakeLists.txt)
		# if(EXISTS ${in_alienPath}/${ALIEN_GENERATED_NAME})
			# set(rr true)
		# endif()
	else()
		set(rr false)			
	endif()
	
	if(rr AND alien)
		#file(STRINGS ${in_alienPath}/${ALIEN_GENERATED_NAME} signs LIMIT_COUNT 3)
		file_strings(${binPath}/${ALIEN_GENERATED_NAME} signs)
		list(LENGTH signs l)
		if(l LESS 3)
			set(rr false)
		else()
			list(GET signs 0 signature)
			list(GET signs 1 hash)
			list(GET signs 2 sdirs)
			string(REGEX MATCH ${BIKES_GNR_SIGNATURE} signature ${signature})
			if(signature)
				string(SUBSTRING ${hash} 1 -1 hash)
				file(MD5 "${in_alienPath}/CMakeLists.txt" rhash)
				if("${rhash}${CMAKEBIKES_MODULES_MD5}" STREQUAL "${hash}")
					string(LENGTH ${sdirs} l)
					if(l GREATER  1)
						string(SUBSTRING ${sdirs} 1 -1 sdirs)
						parse_string(${sdirs} PATH_STRING_SEPARATOR sd)
					endif()
				else()
					set(rr false)
				endif()
			else()
				set(rr false)
			endif()
		endif()
	endif()
	
	set(${out_readyRead} ${rr} PARENT_SCOPE)
	if(sd)
		set(psd)
		foreach(d ${sd})
			set(psd ${psd} ${in_alienPath}/${d})
		endforeach()
		set(${out_alienSubdirs} ${psd} PARENT_SCOPE)
	else()
		set(${out_alienSubdirs} PARENT_SCOPE)
	endif()
endfunction()

#===============================================================================
function(generate_CMakeBikesList  in_path  out_successfully)
	get_filename_component(in_path ${in_path} ABSOLUTE)
	br()
	message(STATUS "CMakeBikes generate CMakeBikesLists for alien directory: ${in_path}")
	if(NOT EXISTS ${in_path}/CMakeLists.txt)
		set(${out_successfully} NO PARENT_SCOPE)
		return()
	endif()
	
	get_binary_path(${in_path} binPath)
	set(wf "${binPath}/${ALIEN_GENERATED_NAME}")
	file(WRITE ${wf} "#${BIKES_GNR_SIGNATURE}")
	file(MD5 "${in_path}/CMakeLists.txt" hash)
	file(APPEND ${wf} "\n#${hash}${CMAKEBIKES_MODULES_MD5}")

	set(gcml "#")	
	#file(STRINGS ${in_path}/CMakeLists.txt cml)
	file_strings("${in_path}/CMakeLists.txt" cml)
	list(LENGTH cml cml_l)
	math(EXPR cml_l_ ${cml_l}-1)
	#foreach(s ${cml})
	set(continue_i -1)
	foreach(si RANGE 0 ${cml_l_})
		if(${si} GREATER ${continue_i})
			list(GET cml ${si} s)	
			set(s ${s})
			if(DEFINED s)
				#message("cml[${si}]=${s}")
				escape_str(s)
				string(TOLOWER ${s} lows)
				string(FIND ${lows} "#" c)
				if(NOT (${c} EQUAL 0))					
					get_func_string(cml ${si} project funcStr _i)
					if(funcStr)
						#BINGO: project						
						add_lines_for_project(${funcStr} gcml)
						set(continue_i ${_i})
					else()						
						get_func_string(cml ${si} add_subdirectory funcStr _i)
						if(funcStr)
							#BINGO: subdirectory
							add_lines_for_subdirectory(${funcStr} gcml)
							set(continue_i ${_i})
						else()							
							get_func_string(cml ${si} add_library funcStr _i)
							if(funcStr)
								#BINGO: library
								add_lines_for_library(${funcStr} gcml)
								set(continue_i ${_i})
							else()								
								get_func_string(cml ${si} add_executable funcStr _i)
								if(funcStr)
									#BINGO: executable
									add_lines_for_executable(${funcStr} gcml)
									set(continue_i ${_i})
								else()									
									get_func_string(cml ${si} add_custom_target funcStr _i)
									if(funcStr)
										#BINGO: custom_target
										add_lines_for_custom_target(${funcStr} gcml)
										set(continue_i ${_i})
									else()									
										#BINGO: nothing
										list(APPEND gcml "${s}")
									endif()
								endif()
							endif()
						endif()
					endif()
				else()
					#BINGO: nothing
					list(APPEND gcml ${s})	
				endif()
			else()
				list(APPEND gcml " ")
			endif()
		endif()
	endforeach()	
	add_lines_for_end(gcml)	
	stringlist_append_to_file(gcml ${wf})
	set(${out_successfully} YES PARENT_SCOPE)
endfunction()
#===============================================================================
function(prepare_alien_subdirectory in_alienDir out_successfully out_alienSubDirs)
	is_alien_dir(${in_alienDir} alien)
	if(NOT alien)
		set(out_successfully YES PARENT_SCOPE)
		set(out_alienSubDirs PARENT_SCOPE)
		return()
	endif()
	
	get_filename_component(in_alienDir ${in_alienDir} ABSOLUTE)
	set(alienSubDirs)
	set(tmp_alienSubDirs)
	check_alien_dir(${in_alienDir} readyRead alienSubDirs)
	
	if(NOT readyRead)
		generate_CMakeBikesList(${in_alienDir} suc)
		check_alien_dir(${in_alienDir} readyRead alienSubDirs)
	endif()	
	
	if(readyRead)
		set(suc YES)
		if(alienSubDirs)
			foreach(sd ${alienSubDirs})
				is_alien_dir(${sd} alien)
				if(alien)
					prepare_alien_subdirectory(${sd} suc dd)
					if(tmp_alienSubDirs)
						set(alienSubDirs ${alienSubDirs} ${tmp_alienSubDirs})
					endif()
				else()
					list(REMOVE_ITEM alienSubDirs ${sd})
				endif()
			endforeach()
		endif()
	else()
		set(suc NO)
	endif()	
	set(tmp_alienSubDirs ${alienSubDirs} PARENT_SCOPE)
	set(${out_alienSubDirs} ${alienSubDirs} PARENT_SCOPE)
	set(${out_successfully} ${suc} PARENT_SCOPE)	
endfunction()
#===============================================================================
function(get_aliases_for_alien in_alienName out_alienAliases)
	string(TOUPPER ${in_alienName} uName)
	string(TOLOWER ${in_alienName} lName)
	set(aliases ${lName} ${uName})
	list(REMOVE_ITEM aliases ${in_alienName})
	set(${out_alienAliases} ${aliases} PARENT_SCOPE)
endfunction()
#===============================================================================
function(add_alien_subdirectory in_alienDir out_successfully)
	prepare_alien_subdirectory(${in_alienDir} suc sd)
	if(suc)
		set(CMAKEBIKES_TMP_SUBPROJECT_NAME)		
		set(dirs ${in_alienDir} ${sd})
		
		# Первый проход ->		
		if(CMAKEBIKES_FIRSTPASSAGE)
			set(aliases)
			foreach(d ${sd})
				get_filename_component(pn ${d} NAME)
				get_aliases_for_alien(${pn} al)
				set(aliases ${aliases} ${al} ${pn})
			endforeach()
			get_filename_component(projectName ${in_alienDir} NAME)		
			get_aliases_for_alien(${projectName} al)
			set(aliases ${aliases} ${al})
			list(REMOVE_DUPLICATES aliases)
			list(REMOVE_ITEM aliases ${projectName})
			set(CMAKEBIKES_${projectName}_ALIASES ${aliases})
			set(CMAKEBIKES_${projectName}_PATH ${in_alienDir})
			set(CMAKEBIKES_TMP_SUBPROJECT_NAME ${projectName})			
			push_up(CMAKEBIKES_TMP_SUBPROJECT_NAME)
			push_up_project_variables(${CMAKEBIKES_TMP_SUBPROJECT_NAME})
			set(${out_successfully} ${suc} PARENT_SCOPE)
			# TODO: необходимо решить проблемму с первым проходом CMakeBikes-проектов 
			# находящихся в поддиректориях чужеродных проектов. Такие проекты не 
			# отслеживаются (первый проход по ним не осуществляется) и в синонимы 
			# текущего чужеродного проекта они не попадают
			return() #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!!!!!!!!!!!!!!!(?)
			
		endif()
		# <- Первый проход
		
		alien_read_begin(dirs)
		add_subdirectory(${in_alienDir})
		alien_read_end(dirs)
		
		if(NOT CMAKEBIKES_TMP_SUBPROJECT_NAME)
			set(CMAKEBIKES_TMP_SUBPROJECT_NAME ${PROJECT_NAME})
		endif()
				
		
		get_all_subproject_list(${CMAKEBIKES_TMP_SUBPROJECT_NAME} spl)
		foreach(p ${CMAKEBIKES_TMP_SUBPROJECT_NAME} ${spl})
			set(headersIncludeDirs)
			set(includePrefixes ${p}  ${CMAKEBIKES_${p}_TARGET_LIST})
			find_project_files(${p}_SOURCE_DIR ANYFILE HINT_EXT_HEADERS hf)
			if(hf)
				get_files_dir_list(hf hd)
				get_public_include_dirs(hd includePrefixes headersIncludeDirs)
			endif()
				
			#	message("\n\n\n\n############# ${p} #########################")
			#	message("#################################################")
				
				foreach(t ${CMAKEBIKES_${p}_TARGET_LIST})
			#		message_var(t)
					get_target_property(includeDirs ${t} INCLUDE_DIRECTORIES)
					
										
					set(includeDirs ${includeDirs} ${headersIncludeDirs})			
					if(includeDirs)
						get_public_include_dirs(includeDirs includePrefixes publicIncludeDirs)
					else()
						set(publicIncludeDirs ${${p}_SOURCE_DIR})
					endif()
									
					
					set(CMAKEBIKES_${t}_USERS_INCLUDE_DIRS ${publicIncludeDirs})
					set(CMAKEBIKES_${t}_USERS_DEFINITIONS)
				endforeach()
			
							
				if(headersIncludeDirs)				
					set(CMAKEBIKES_${p}_USERS_INCLUDE_DIRS ${CMAKEBIKES_${p}_USERS_INCLUDE_DIRS} ${headersIncludeDirs})					
				else()
					set(CMAKEBIKES_${p}_USERS_INCLUDE_DIRS ${CMAKEBIKES_${p}_USERS_INCLUDE_DIRS} ${${p}_SOURCE_DIR})
				endif()
				
				list(REMOVE_DUPLICATES CMAKEBIKES_${p}_USERS_INCLUDE_DIRS)				
				set(CMAKEBIKES_${p}_USERS_DEFINITIONS)
			
		#	message_var(CMAKEBIKES_${p}_USERS_INCLUDE_DIRS)			
		#	message("\n#################################################")
		#	message("#################################################\n\n\n\n")
		endforeach()
		
		
		
		#project_alienvars_to_cmakebikesvars(${CMAKEBIKES_TMP_SUBPROJECT_NAME})
						
		push_up(CMAKEBIKES_TMP_SUBPROJECT_NAME)
		push_up_project_variables(${CMAKEBIKES_TMP_SUBPROJECT_NAME})
	else()
	endif()
	set(${out_successfully} ${suc} PARENT_SCOPE)
endfunction()
#===============================================================================

